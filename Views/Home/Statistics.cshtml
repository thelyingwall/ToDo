@model ToDo.ViewModels.StatisticsListViewModel;
@{
    ViewData["Title"] = "Statystyki";
}
<partial name="_Background" />
<div class="no-gradient justify-content-center mx-auto" style="margin-top:10%;width:70%;">
<h1 class="text-center">@ViewData["Title"]</h1>
<br />
<h3 class="text-center">Ilość zadań według stanu wykonania</h3>
<canvas id="mychart2"></canvas>
<br />
<h3 class ="text-center">Ilość zadań według priorytetu</h3>
<canvas id="mychart"></canvas>

</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var productLabels = @Html.Raw(Json.Serialize(Model.stat1.Select(s => s.Key)));
        var productData = @Html.Raw(Json.Serialize(Model.stat1.Select(s => s.Value)));

        var ctx = document.getElementById('mychart').getContext('2d');
        var mychart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: productLabels,
                datasets: [{
                    label: 'Ilość zadań',
                    data: productData,
                    backgroundColor: 'black',
                    borderWidth: 1
                }]
            }
        });
    </script>
    <script>
        var productLabels = @Html.Raw(Json.Serialize(Model.stat2.Select(s => s.Key)));
        var productData = @Html.Raw(Json.Serialize(Model.stat2.Select(s => s.Value)));
        var barColors = ["gold", "darkorange"];
        var ctx = document.getElementById('mychart2').getContext('2d');
        var mychart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: productLabels,
                datasets: [{
                    label: 'Ilość zadań',
                    data: productData,
                    backgroundColor: 'black',
                    borderWidth: 1
                }]
            }
        });
    </script>
}
